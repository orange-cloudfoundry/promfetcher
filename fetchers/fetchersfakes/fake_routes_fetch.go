// Code generated by counterfeiter. DO NOT EDIT.
package fetchersfakes

import (
	"os"
	"sync"

	"github.com/orange-cloudfoundry/promfetcher/fetchers"
	"github.com/orange-cloudfoundry/promfetcher/models"
)

type FakeRoutesFetch struct {
	RoutesStub        func() models.Routes
	routesMutex       sync.RWMutex
	routesArgsForCall []struct {
	}
	routesReturns struct {
		result1 models.Routes
	}
	routesReturnsOnCall map[int]struct {
		result1 models.Routes
	}
	RunStub        func(<-chan os.Signal, chan<- struct{}) error
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		arg1 <-chan os.Signal
		arg2 chan<- struct{}
	}
	runReturns struct {
		result1 error
	}
	runReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRoutesFetch) Routes() models.Routes {
	fake.routesMutex.Lock()
	ret, specificReturn := fake.routesReturnsOnCall[len(fake.routesArgsForCall)]
	fake.routesArgsForCall = append(fake.routesArgsForCall, struct {
	}{})
	stub := fake.RoutesStub
	fakeReturns := fake.routesReturns
	fake.recordInvocation("Routes", []interface{}{})
	fake.routesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRoutesFetch) RoutesCallCount() int {
	fake.routesMutex.RLock()
	defer fake.routesMutex.RUnlock()
	return len(fake.routesArgsForCall)
}

func (fake *FakeRoutesFetch) RoutesCalls(stub func() models.Routes) {
	fake.routesMutex.Lock()
	defer fake.routesMutex.Unlock()
	fake.RoutesStub = stub
}

func (fake *FakeRoutesFetch) RoutesReturns(result1 models.Routes) {
	fake.routesMutex.Lock()
	defer fake.routesMutex.Unlock()
	fake.RoutesStub = nil
	fake.routesReturns = struct {
		result1 models.Routes
	}{result1}
}

func (fake *FakeRoutesFetch) RoutesReturnsOnCall(i int, result1 models.Routes) {
	fake.routesMutex.Lock()
	defer fake.routesMutex.Unlock()
	fake.RoutesStub = nil
	if fake.routesReturnsOnCall == nil {
		fake.routesReturnsOnCall = make(map[int]struct {
			result1 models.Routes
		})
	}
	fake.routesReturnsOnCall[i] = struct {
		result1 models.Routes
	}{result1}
}

func (fake *FakeRoutesFetch) Run(arg1 <-chan os.Signal, arg2 chan<- struct{}) error {
	fake.runMutex.Lock()
	ret, specificReturn := fake.runReturnsOnCall[len(fake.runArgsForCall)]
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		arg1 <-chan os.Signal
		arg2 chan<- struct{}
	}{arg1, arg2})
	stub := fake.RunStub
	fakeReturns := fake.runReturns
	fake.recordInvocation("Run", []interface{}{arg1, arg2})
	fake.runMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRoutesFetch) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeRoutesFetch) RunCalls(stub func(<-chan os.Signal, chan<- struct{}) error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = stub
}

func (fake *FakeRoutesFetch) RunArgsForCall(i int) (<-chan os.Signal, chan<- struct{}) {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	argsForCall := fake.runArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRoutesFetch) RunReturns(result1 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRoutesFetch) RunReturnsOnCall(i int, result1 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	if fake.runReturnsOnCall == nil {
		fake.runReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRoutesFetch) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.routesMutex.RLock()
	defer fake.routesMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRoutesFetch) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ fetchers.RoutesFetch = new(FakeRoutesFetch)
